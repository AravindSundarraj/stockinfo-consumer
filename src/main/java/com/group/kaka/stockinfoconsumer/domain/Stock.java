/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.group.kaka.stockinfoconsumer.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Stock extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4720212321568751963L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Stock\",\"namespace\":\"com.group.kaka.stockinfoconsumer.domain\",\"fields\":[{\"name\":\"ticker\",\"type\":[\"null\",\"string\"]},{\"name\":\"company\",\"type\":[\"null\",\"string\"]},{\"name\":\"founded\",\"type\":[\"null\",\"string\"]},{\"name\":\"ceo\",\"type\":[\"null\",\"string\"]},{\"name\":\"employees\",\"type\":[\"null\",\"string\"]},{\"name\":\"headQuarters\",\"type\":[\"null\",\"string\"]},{\"name\":\"marketCapital\",\"type\":[\"null\",\"string\"]},{\"name\":\"dividend\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Stock> ENCODER =
      new BinaryMessageEncoder<Stock>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Stock> DECODER =
      new BinaryMessageDecoder<Stock>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Stock> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Stock> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Stock> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Stock>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Stock to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Stock from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Stock instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Stock fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ticker;
  @Deprecated public java.lang.CharSequence company;
  @Deprecated public java.lang.CharSequence founded;
  @Deprecated public java.lang.CharSequence ceo;
  @Deprecated public java.lang.CharSequence employees;
  @Deprecated public java.lang.CharSequence headQuarters;
  @Deprecated public java.lang.CharSequence marketCapital;
  @Deprecated public java.lang.CharSequence dividend;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Stock() {}

  /**
   * All-args constructor.
   * @param ticker The new value for ticker
   * @param company The new value for company
   * @param founded The new value for founded
   * @param ceo The new value for ceo
   * @param employees The new value for employees
   * @param headQuarters The new value for headQuarters
   * @param marketCapital The new value for marketCapital
   * @param dividend The new value for dividend
   */
  public Stock(java.lang.CharSequence ticker, java.lang.CharSequence company, java.lang.CharSequence founded, java.lang.CharSequence ceo, java.lang.CharSequence employees, java.lang.CharSequence headQuarters, java.lang.CharSequence marketCapital, java.lang.CharSequence dividend) {
    this.ticker = ticker;
    this.company = company;
    this.founded = founded;
    this.ceo = ceo;
    this.employees = employees;
    this.headQuarters = headQuarters;
    this.marketCapital = marketCapital;
    this.dividend = dividend;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ticker;
    case 1: return company;
    case 2: return founded;
    case 3: return ceo;
    case 4: return employees;
    case 5: return headQuarters;
    case 6: return marketCapital;
    case 7: return dividend;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ticker = (java.lang.CharSequence)value$; break;
    case 1: company = (java.lang.CharSequence)value$; break;
    case 2: founded = (java.lang.CharSequence)value$; break;
    case 3: ceo = (java.lang.CharSequence)value$; break;
    case 4: employees = (java.lang.CharSequence)value$; break;
    case 5: headQuarters = (java.lang.CharSequence)value$; break;
    case 6: marketCapital = (java.lang.CharSequence)value$; break;
    case 7: dividend = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ticker' field.
   * @return The value of the 'ticker' field.
   */
  public java.lang.CharSequence getTicker() {
    return ticker;
  }


  /**
   * Sets the value of the 'ticker' field.
   * @param value the value to set.
   */
  public void setTicker(java.lang.CharSequence value) {
    this.ticker = value;
  }

  /**
   * Gets the value of the 'company' field.
   * @return The value of the 'company' field.
   */
  public java.lang.CharSequence getCompany() {
    return company;
  }


  /**
   * Sets the value of the 'company' field.
   * @param value the value to set.
   */
  public void setCompany(java.lang.CharSequence value) {
    this.company = value;
  }

  /**
   * Gets the value of the 'founded' field.
   * @return The value of the 'founded' field.
   */
  public java.lang.CharSequence getFounded() {
    return founded;
  }


  /**
   * Sets the value of the 'founded' field.
   * @param value the value to set.
   */
  public void setFounded(java.lang.CharSequence value) {
    this.founded = value;
  }

  /**
   * Gets the value of the 'ceo' field.
   * @return The value of the 'ceo' field.
   */
  public java.lang.CharSequence getCeo() {
    return ceo;
  }


  /**
   * Sets the value of the 'ceo' field.
   * @param value the value to set.
   */
  public void setCeo(java.lang.CharSequence value) {
    this.ceo = value;
  }

  /**
   * Gets the value of the 'employees' field.
   * @return The value of the 'employees' field.
   */
  public java.lang.CharSequence getEmployees() {
    return employees;
  }


  /**
   * Sets the value of the 'employees' field.
   * @param value the value to set.
   */
  public void setEmployees(java.lang.CharSequence value) {
    this.employees = value;
  }

  /**
   * Gets the value of the 'headQuarters' field.
   * @return The value of the 'headQuarters' field.
   */
  public java.lang.CharSequence getHeadQuarters() {
    return headQuarters;
  }


  /**
   * Sets the value of the 'headQuarters' field.
   * @param value the value to set.
   */
  public void setHeadQuarters(java.lang.CharSequence value) {
    this.headQuarters = value;
  }

  /**
   * Gets the value of the 'marketCapital' field.
   * @return The value of the 'marketCapital' field.
   */
  public java.lang.CharSequence getMarketCapital() {
    return marketCapital;
  }


  /**
   * Sets the value of the 'marketCapital' field.
   * @param value the value to set.
   */
  public void setMarketCapital(java.lang.CharSequence value) {
    this.marketCapital = value;
  }

  /**
   * Gets the value of the 'dividend' field.
   * @return The value of the 'dividend' field.
   */
  public java.lang.CharSequence getDividend() {
    return dividend;
  }


  /**
   * Sets the value of the 'dividend' field.
   * @param value the value to set.
   */
  public void setDividend(java.lang.CharSequence value) {
    this.dividend = value;
  }

  /**
   * Creates a new Stock RecordBuilder.
   * @return A new Stock RecordBuilder
   */
  public static com.group.kaka.stockinfoconsumer.domain.Stock.Builder newBuilder() {
    return new com.group.kaka.stockinfoconsumer.domain.Stock.Builder();
  }

  /**
   * Creates a new Stock RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Stock RecordBuilder
   */
  public static com.group.kaka.stockinfoconsumer.domain.Stock.Builder newBuilder(com.group.kaka.stockinfoconsumer.domain.Stock.Builder other) {
    if (other == null) {
      return new com.group.kaka.stockinfoconsumer.domain.Stock.Builder();
    } else {
      return new com.group.kaka.stockinfoconsumer.domain.Stock.Builder(other);
    }
  }

  /**
   * Creates a new Stock RecordBuilder by copying an existing Stock instance.
   * @param other The existing instance to copy.
   * @return A new Stock RecordBuilder
   */
  public static com.group.kaka.stockinfoconsumer.domain.Stock.Builder newBuilder(com.group.kaka.stockinfoconsumer.domain.Stock other) {
    if (other == null) {
      return new com.group.kaka.stockinfoconsumer.domain.Stock.Builder();
    } else {
      return new com.group.kaka.stockinfoconsumer.domain.Stock.Builder(other);
    }
  }

  /**
   * RecordBuilder for Stock instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Stock>
    implements org.apache.avro.data.RecordBuilder<Stock> {

    private java.lang.CharSequence ticker;
    private java.lang.CharSequence company;
    private java.lang.CharSequence founded;
    private java.lang.CharSequence ceo;
    private java.lang.CharSequence employees;
    private java.lang.CharSequence headQuarters;
    private java.lang.CharSequence marketCapital;
    private java.lang.CharSequence dividend;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.group.kaka.stockinfoconsumer.domain.Stock.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ticker)) {
        this.ticker = data().deepCopy(fields()[0].schema(), other.ticker);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.company)) {
        this.company = data().deepCopy(fields()[1].schema(), other.company);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.founded)) {
        this.founded = data().deepCopy(fields()[2].schema(), other.founded);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ceo)) {
        this.ceo = data().deepCopy(fields()[3].schema(), other.ceo);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.employees)) {
        this.employees = data().deepCopy(fields()[4].schema(), other.employees);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.headQuarters)) {
        this.headQuarters = data().deepCopy(fields()[5].schema(), other.headQuarters);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.marketCapital)) {
        this.marketCapital = data().deepCopy(fields()[6].schema(), other.marketCapital);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.dividend)) {
        this.dividend = data().deepCopy(fields()[7].schema(), other.dividend);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Stock instance
     * @param other The existing instance to copy.
     */
    private Builder(com.group.kaka.stockinfoconsumer.domain.Stock other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ticker)) {
        this.ticker = data().deepCopy(fields()[0].schema(), other.ticker);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.company)) {
        this.company = data().deepCopy(fields()[1].schema(), other.company);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.founded)) {
        this.founded = data().deepCopy(fields()[2].schema(), other.founded);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ceo)) {
        this.ceo = data().deepCopy(fields()[3].schema(), other.ceo);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.employees)) {
        this.employees = data().deepCopy(fields()[4].schema(), other.employees);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.headQuarters)) {
        this.headQuarters = data().deepCopy(fields()[5].schema(), other.headQuarters);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.marketCapital)) {
        this.marketCapital = data().deepCopy(fields()[6].schema(), other.marketCapital);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dividend)) {
        this.dividend = data().deepCopy(fields()[7].schema(), other.dividend);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'ticker' field.
      * @return The value.
      */
    public java.lang.CharSequence getTicker() {
      return ticker;
    }


    /**
      * Sets the value of the 'ticker' field.
      * @param value The value of 'ticker'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setTicker(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ticker = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ticker' field has been set.
      * @return True if the 'ticker' field has been set, false otherwise.
      */
    public boolean hasTicker() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ticker' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearTicker() {
      ticker = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'company' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompany() {
      return company;
    }


    /**
      * Sets the value of the 'company' field.
      * @param value The value of 'company'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setCompany(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.company = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'company' field has been set.
      * @return True if the 'company' field has been set, false otherwise.
      */
    public boolean hasCompany() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'company' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearCompany() {
      company = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'founded' field.
      * @return The value.
      */
    public java.lang.CharSequence getFounded() {
      return founded;
    }


    /**
      * Sets the value of the 'founded' field.
      * @param value The value of 'founded'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setFounded(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.founded = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'founded' field has been set.
      * @return True if the 'founded' field has been set, false otherwise.
      */
    public boolean hasFounded() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'founded' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearFounded() {
      founded = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ceo' field.
      * @return The value.
      */
    public java.lang.CharSequence getCeo() {
      return ceo;
    }


    /**
      * Sets the value of the 'ceo' field.
      * @param value The value of 'ceo'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setCeo(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.ceo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ceo' field has been set.
      * @return True if the 'ceo' field has been set, false otherwise.
      */
    public boolean hasCeo() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ceo' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearCeo() {
      ceo = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'employees' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmployees() {
      return employees;
    }


    /**
      * Sets the value of the 'employees' field.
      * @param value The value of 'employees'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setEmployees(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.employees = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'employees' field has been set.
      * @return True if the 'employees' field has been set, false otherwise.
      */
    public boolean hasEmployees() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'employees' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearEmployees() {
      employees = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'headQuarters' field.
      * @return The value.
      */
    public java.lang.CharSequence getHeadQuarters() {
      return headQuarters;
    }


    /**
      * Sets the value of the 'headQuarters' field.
      * @param value The value of 'headQuarters'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setHeadQuarters(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.headQuarters = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'headQuarters' field has been set.
      * @return True if the 'headQuarters' field has been set, false otherwise.
      */
    public boolean hasHeadQuarters() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'headQuarters' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearHeadQuarters() {
      headQuarters = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketCapital' field.
      * @return The value.
      */
    public java.lang.CharSequence getMarketCapital() {
      return marketCapital;
    }


    /**
      * Sets the value of the 'marketCapital' field.
      * @param value The value of 'marketCapital'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setMarketCapital(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.marketCapital = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'marketCapital' field has been set.
      * @return True if the 'marketCapital' field has been set, false otherwise.
      */
    public boolean hasMarketCapital() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'marketCapital' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearMarketCapital() {
      marketCapital = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'dividend' field.
      * @return The value.
      */
    public java.lang.CharSequence getDividend() {
      return dividend;
    }


    /**
      * Sets the value of the 'dividend' field.
      * @param value The value of 'dividend'.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder setDividend(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.dividend = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'dividend' field has been set.
      * @return True if the 'dividend' field has been set, false otherwise.
      */
    public boolean hasDividend() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'dividend' field.
      * @return This builder.
      */
    public com.group.kaka.stockinfoconsumer.domain.Stock.Builder clearDividend() {
      dividend = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Stock build() {
      try {
        Stock record = new Stock();
        record.ticker = fieldSetFlags()[0] ? this.ticker : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.company = fieldSetFlags()[1] ? this.company : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.founded = fieldSetFlags()[2] ? this.founded : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.ceo = fieldSetFlags()[3] ? this.ceo : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.employees = fieldSetFlags()[4] ? this.employees : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.headQuarters = fieldSetFlags()[5] ? this.headQuarters : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.marketCapital = fieldSetFlags()[6] ? this.marketCapital : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.dividend = fieldSetFlags()[7] ? this.dividend : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Stock>
    WRITER$ = (org.apache.avro.io.DatumWriter<Stock>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Stock>
    READER$ = (org.apache.avro.io.DatumReader<Stock>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.ticker == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ticker);
    }

    if (this.company == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.company);
    }

    if (this.founded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.founded);
    }

    if (this.ceo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ceo);
    }

    if (this.employees == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.employees);
    }

    if (this.headQuarters == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.headQuarters);
    }

    if (this.marketCapital == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marketCapital);
    }

    if (this.dividend == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dividend);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.ticker = null;
      } else {
        this.ticker = in.readString(this.ticker instanceof Utf8 ? (Utf8)this.ticker : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.company = null;
      } else {
        this.company = in.readString(this.company instanceof Utf8 ? (Utf8)this.company : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.founded = null;
      } else {
        this.founded = in.readString(this.founded instanceof Utf8 ? (Utf8)this.founded : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ceo = null;
      } else {
        this.ceo = in.readString(this.ceo instanceof Utf8 ? (Utf8)this.ceo : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.employees = null;
      } else {
        this.employees = in.readString(this.employees instanceof Utf8 ? (Utf8)this.employees : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.headQuarters = null;
      } else {
        this.headQuarters = in.readString(this.headQuarters instanceof Utf8 ? (Utf8)this.headQuarters : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marketCapital = null;
      } else {
        this.marketCapital = in.readString(this.marketCapital instanceof Utf8 ? (Utf8)this.marketCapital : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dividend = null;
      } else {
        this.dividend = in.readString(this.dividend instanceof Utf8 ? (Utf8)this.dividend : null);
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ticker = null;
          } else {
            this.ticker = in.readString(this.ticker instanceof Utf8 ? (Utf8)this.ticker : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.company = null;
          } else {
            this.company = in.readString(this.company instanceof Utf8 ? (Utf8)this.company : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.founded = null;
          } else {
            this.founded = in.readString(this.founded instanceof Utf8 ? (Utf8)this.founded : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ceo = null;
          } else {
            this.ceo = in.readString(this.ceo instanceof Utf8 ? (Utf8)this.ceo : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.employees = null;
          } else {
            this.employees = in.readString(this.employees instanceof Utf8 ? (Utf8)this.employees : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.headQuarters = null;
          } else {
            this.headQuarters = in.readString(this.headQuarters instanceof Utf8 ? (Utf8)this.headQuarters : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketCapital = null;
          } else {
            this.marketCapital = in.readString(this.marketCapital instanceof Utf8 ? (Utf8)this.marketCapital : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dividend = null;
          } else {
            this.dividend = in.readString(this.dividend instanceof Utf8 ? (Utf8)this.dividend : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










